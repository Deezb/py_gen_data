PLD = {
    '_ast.Module' : ['body'],
    '_ast.Num' : ['n'],
    '_ast.Str' : ['s'],
    '_ast.Bytes' : ['s'],
    '_ast.List' : ['elts','ctx'],
    '_ast.Tuple' : ['elts','ctx'],
    '_ast.Set' : ['elts'],
    '_ast.Dict' : ['keys','values'],
    '_ast.Ellipsis' : [],
    '_ast.NameConstant' : ['value'],
    '_ast.Name' : ['id','ctx'],
    '_ast.Load' : [],
    '_ast.Store' : [],
    '_ast.Del' : [],
    '_ast.Starred' : ['value','ctx'],
    '_ast.Expr' : ['value'],
    '_ast.UnaryOp' : ['op', 'operand'],
    '_ast.UAdd' : [],
    '_ast.USub' : [],
    '_ast.Not' : [],    # not keyword
    '_ast.Invert' : [], # ~ operator
    '_ast.BinOp' : ['left','op','right'],
    '_ast.Add' : [],
    '_ast.Sub' : [],
    '_ast.Mult' : [],
    '_ast.Div' : [],
    '_ast.FloorDiv' : [],
    '_ast.Mod' : [],
    '_ast.Pow' : [],
    '_ast.LShift' : [],
    '_ast.RShift' : [],
    '_ast.BitOr' : [],
    '_ast.BitXor' : [],
    '_ast.BitAnd' : [],
    '_ast.MatMult' : [], # new in 3.5 matrix multiplier '@'
    '_ast.BoolOp' : ['op','values'],
    '_ast.And' : [],
    '_ast.Or' : [],
    '_ast.Compare' : ['left','ops','comparators'], # ops is a list
    '_ast.Eq' : [],
    '_ast.NotEq' : [],
    '_ast.Lt' : [],
    '_ast.LtE' : [],
    '_ast.Gt' : [],
    '_ast.GtE' : [],
    '_ast.Is' : [],
    '_ast.IsNot' : [],
    '_ast.In' : [],
    '_ast.NotIn' : [],
    '_ast.Call' : ['func', 'args', 'keywords', 'starargs', 'kwargs'],
    '_ast.keyword' : ['arg', 'value'],
    '_ast.IfExp' : ['test','body','orelse'], # all are Name nodes
    '_ast.Attribute' : ['value','attr','ctx'],
    '_ast.Subscript' : ['value','slice','ctx'],
    '_ast.Index' : ['value'],
    '_ast.Slice' : ['lower','upper','step'],
    '_ast.ExtSlice' : ['dims'],
    '_ast.ListComp' : ['elt','generators'],
    '_ast.SetComp' : ['elt','generators'],
    '_ast.GeneratorComp' : ['elt','generators'],
    '_ast.DictComp' : ['key','value','generators'],
    '_ast.comprehension' : ['target', 'iter', 'ifs'],
    '_ast.Assign' : ['targets', 'value'],
    '_ast.AugAssign' : ['target', 'op', 'value'],
    '_ast.Print' : ['dest', 'values', 'nl'],
    '_ast.Raise' : ['exc', 'cause'],
    '_ast.Assert' : ['test', 'msg'],
    '_ast.Delete' : ['targets'],
    '_ast.Pass' : [],
    '_ast.Import' : ['names'],
    '_ast.ImportFrom' : ['module', 'names', 'level'],
    '_ast.alias' : ['name', 'asname'],
    '_ast.If' : ['test', 'body', 'orelse'],
    '_ast.For' : ['target', 'iter', 'body', 'orelse'],
    '_ast.While' : ['test', 'body', 'orelse'],
    '_ast.Break' : [],
    '_ast.Continue' : [],
    '_ast.Try' : ['body', 'handlers', 'orelse', 'finalbody'],
    '_ast.TryFinally' : ['body', 'finalbody'],
    '_ast.TryExcept' : ['body', 'handlers', 'orelse'],
    '_ast.ExceptHandler' : ['type', 'name', 'body'],
    '_ast.With' : ['items', 'body'],
    '_ast.withitem' : ['context_expr', 'optional_vars'],
    '_ast.FunctionDef' : ['name', 'args', 'body', 'decorator_list', 'returns'],
    '_ast.Lambda' : ['args', 'body'],
    '_ast.arguments' : ['args', 'vararg', 'kwonlyargs', 'kwarg', 'defaults', 'kw_defaults'],
    '_ast.arg' : ['arg', 'annotation'],
    '_ast.Return' : ['value'],
    '_ast.Yield' : ['value'],
    '_ast.YieldFrom' : ['value'],
    '_ast.Global' : ['names'],
    '_ast.NonLocal' : ['names'],
    '-ast.ClassDef' :['name', 'bases', 'keywords', 'starargs', 'kwargs', 'body', 'decorator_list'],
    '_ast.AsyncFunctionDef' : ['name', 'args', 'body', 'decorator_list', 'returns'],
    '_ast.Await' : ['value'],
    '_ast.AsyncFor' : ['target', 'iter', 'body', 'orelse'],
    '_ast.AsyncWith' : ['items', 'body']
}